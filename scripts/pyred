#!/usr/bin/env python

import os
import sys
import getpass
from ConfigParser import RawConfigParser
from argparse import ArgumentParser

from redmine import Redmine

parser = ArgumentParser(description="""
redmine wrapper written in python with mechanize
""")
parser.add_argument('--url', help='url of the redmine server')
parser.add_argument('--username')
parser.add_argument('--password')
parser.add_argument('--tracker-id', nargs=2, action='append',
                    default=[('Bug', '1'), ('Feature', '2'), ('Support', '3'),])
parser.add_argument('--user-id', nargs=2, action='append', default=[])

subparsers = parser.add_subparsers(dest='command')
subparser = subparsers.add_parser('upload',
                          description='upload a file to redmine project')
subparser.add_argument('project',
                       help='name of the redmine project')
subparser.add_argument('file_name', nargs='+', default=[])
subparser.add_argument('--file-desc', nargs='+', default=[])

subparser = subparsers.add_parser('upload-issue',
                          description='upload a file to redmine issue')
subparser.add_argument('issue', type=int)
subparser.add_argument('file_name', nargs='+', default=[])
subparser.add_argument('--file-desc', nargs='+', default=[])

subparser = subparsers.add_parser('issue',
                          description='create redmine issue')
subparser.add_argument('project',
                       help='name of the redmine project')
subparser.add_argument('tracker', choices=Redmine.trackers.keys())
subparser.add_argument('subject')
subparser.add_argument('--description')
subparser.add_argument('--desc-file')
subparser.add_argument('--parent', type=int)
subparser.add_argument('--file-name', nargs='+', default=[])
subparser.add_argument('--file-desc', nargs='+', default=[])
subparser.add_argument('--watcher', nargs='+', default=[])

subparser = subparsers.add_parser('wiki',
                          description='create wiki page')
subparser.add_argument('project',
                       help='name of the redmine project')
subparser.add_argument('title')
subparser.add_argument('--description')
subparser.add_argument('--desc-file')
subparser.add_argument('--parent', default='Wiki')

subparser = subparsers.add_parser('list-issue', description='list issue')
subparser.add_argument('issue', type=int)

def get_desc(args):
    if args.description is not None:
        desc = args.description
    elif args.desc_file is not None and os.path.isfile(args.desc_file):
        desc = open(args.desc_file).read()
    else:
        raise AssertionError('description has to be set')
    return desc

args = parser.parse_args()

cfg_name = os.path.expanduser('~/.%s.cfg' % os.path.basename(__file__))
cfg = RawConfigParser()
cfg.optionxform = str
cfg.read(cfg_name)

for tracker, tracker_id in args.tracker_id:
    cfg.set('trackers', tracker, tracker_id)
for user, user_id in args.user_id:
    cfg.set('users', user, user_id)

class MyRedmine(Redmine):
    users = dict((user, cfg.getint('users', user))
                 for user in cfg.options('users'))
    trackers = dict((tracker, cfg.getint('trackers', tracker))
                    for tracker in cfg.options('trackers'))

section = 'server'
if args.url is not None:
    url = cfg.set(section, 'url', args.url)
assert cfg.has_option(section, 'url'), 'url should be set for redmine server'
url = cfg.get(section, 'url')
redmine = MyRedmine(url)

if args.username is not None and args.password is not None:
    cfg.set(section, 'username', args.username)
    cfg.set(section, 'password', args.password)
if cfg.has_option(section, 'username') and cfg.has_option(section, 'password'):
    username = cfg.get(section, 'username')
    password = cfg.get(section, 'password')
    redmine.login(username, password)
else:
    print >> sys.stderr, 'No authentication has been set!'

cfg.write(open(cfg_name, 'wb'))

if args.command == 'upload':
    file_descs = Redmine.fit_file_desc(args.file_desc, args.file_name)
    for file_name, file_desc in zip(args.file_name, file_descs):
        redmine.upload_project_file(args.project, file_name, file_desc)
elif args.command == 'upload-issue':
    file_descs = Redmine.fit_file_desc(args.file_desc, args.file_name)
    for file_name, file_desc in zip(args.file_name, file_descs):
        redmine.upload_issue_file(args.issue, file_name, file_desc)
elif args.command == 'issue':
    issue = redmine.create_issue(args.project, args.tracker, args.subject,
                                 get_desc(args), args.parent, args.watcher)
    file_descs = Redmine.fit_file_desc(args.file_desc, args.file_name)
    for file_name, file_desc in zip(args.file_name, file_descs):
        redmine.upload_issue_file(issue, file_name, file_desc)
    print issue
elif args.command == 'wiki':
    redmine.create_wiki(args.project, args.title, get_desc(args), args.parent)
elif args.command == 'list-issue':
    subtasks = redmine.get_subtasks(args.issue)
    print 'Subtasks of %d issue' % args.issue
    for link, title in subtasks.iteritems():
        print title, link
else:
    print >> sys.stderr, 'What should I do?'

