#!/usr/bin/env python

import os
import sys
import getpass
from ConfigParser import RawConfigParser
from argparse import ArgumentParser

from redmine import Redmine

parser = ArgumentParser(description="""
redmine wrapper written in python with mechanize
""")
parser.add_argument('--url', help='url of the redmine server')
parser.add_argument('--username')
parser.add_argument('--password')

subparsers = parser.add_subparsers(dest='command')
subparser = subparsers.add_parser('upload',
                          description='upload a file to redmine project')
subparser.add_argument('project',
                       help='name of the redmine project')
subparser.add_argument('file_name', nargs='+')
subparser.add_argument('--file-desc', nargs='+')

subparser = subparsers.add_parser('upload-issue',
                          description='upload a file to redmine issue')
subparser.add_argument('issue', type=int)
subparser.add_argument('file_name', nargs='+')
subparser.add_argument('--file-desc', nargs='+')

subparser = subparsers.add_parser('issue',
                          description='create redmine issue')
subparser.add_argument('project',
                       help='name of the redmine project')
subparser.add_argument('tracker', choices=Redmine.trackers.keys())
subparser.add_argument('subject')
subparser.add_argument('description')
subparser.add_argument('--parent', type=int)
subparser.add_argument('--file-name', nargs='+')
subparser.add_argument('--file-desc', nargs='+')

subparser = subparsers.add_parser('wiki',
                          description='create wiki page')
subparser.add_argument('project',
                       help='name of the redmine project')
subparser.add_argument('title')
subparser.add_argument('description')
subparser.add_argument('--parent', default='Wiki')

args = parser.parse_args()

cfg_name = os.path.expanduser('~/.%s.cfg' % os.path.basename(__file__))
cfg = RawConfigParser()
cfg.optionxform = str
cfg.read(cfg_name)

section = 'server'
if args.url is not None:
    url = cfg.set(section, 'url', args.url)
assert cfg.has_option(section, 'url'), 'url should be set for redmine server'
url = cfg.get(section, 'url')
redmine = Redmine(url)

if args.username is not None and args.password is not None:
    cfg.set(section, 'username', args.username)
    cfg.set(section, 'password', args.password)
if cfg.has_option(section, 'username') and cfg.has_option(section, 'password'):
    username = cfg.get(section, 'username')
    password = cfg.get(section, 'password')
    redmine.login(username, password)
else:
    print >> sys.stderr, 'No authentication has been set!'

cfg.write(open(cfg_name, 'wb'))


if args.command == 'upload':
    assert args.project is not None, 'project has to be set'
    assert args.file_name, 'file-name has to be set'

    file_descs = Redmine.fit_file_desc(args.file_desc, args.file_name)
    for file_name, file_desc in zip(args.file_name, file_descs):
        redmine.upload_project_file(args.project, file_name, file_desc)
elif args.command == 'upload-issue':
    assert args.issue is not None, 'issue has to be set'
    assert args.file_name, 'file-name has to be set'

    file_descs = Redmine.fit_file_desc(args.file_desc, args.file_name)
    for file_name, file_desc in zip(args.file_name, file_descs):
        redmine.upload_issue_file(args.issue, file_name, file_desc)
elif args.command == 'issue':
    assert args.project is not None, 'project has to be set'
    assert args.subject is not None, 'subject has to be set'
    assert args.description is not None, 'description has to be set'
    assert args.tracker is not None, 'tracker has to be set'

    issue = redmine.create_issue(args.project, args.subject,
                                 args.description, args.tracker,
                                 args.parent)
    file_descs = Redmine.fit_file_desc(args.file_desc, args.file_name)
    for file_name, file_desc in zip(args.file_name, file_descs):
        redmine.upload_issue_file(issue, file_name, file_desc)
    print issue
elif args.command == 'wiki':
    assert args.project is not None, 'project has to be set'
    assert args.title is not None, 'wiki title has to be set'
    assert args.description is not None, 'wiki description has to be set'
    redmine.create_wiki(args.project, args.title, args.description, args.parent)
else:
    print >> sys.stderr, 'What should I do?'

